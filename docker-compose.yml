services:
  # 1. Infrastructure services
  backend-database:
    build: ./backend-database
    container_name: backend-database
    env_file:
      - ./backend-database/.env
    ports:
      - "5432:5432"
    volumes:
      - pgdata:/var/lib/postgresql/data
    restart: unless-stopped

  grafana:
    image: grafana/grafana:10.4.2
    ports:
      - "3400:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      - ./batch_data:/batch_data
      - ./monitor-reporting/grafana/provisioning/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitor-reporting/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./monitor-reporting/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
    restart: unless-stopped

  orchestration:
    build: ./backend-service-orchestration
    env_file:
      - ./backend-service-orchestration/.env
    ports:
      - 4200:4200
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://0.0.0.0:4200/docs"]
      interval: 10s
      timeout: 5s
      retries: 20

  # 2. Services depending on infrastructure
  experiment-tracking:
    build: ./backend-service-experiment-tracking
    container_name: backend-service-experiment-tracking
    ports:
      - "5000:5000"
    command: >
      mlflow server
      --backend-store-uri postgresql://postgres:postgres@backend-database:5432/mlflow_db
      --default-artifact-root /mlruns
      --host 0.0.0.0
    depends_on:
      - backend-database
    volumes:
      - ./mlruns:/mlruns
    restart: unless-stopped

  # 3. Model training (needs experiment-tracking)
  model-training:
    build: ./train
    env_file:
      - ./train/.env
    depends_on:
      - experiment-tracking
    volumes:
      - ./train/data:/app/data
      - ./mlruns:/mlruns
    restart: on-failure

  # 4. Batch service (needs model-training, orchestration)
  batch-service:
    build: ./deploy_batch
    depends_on:
      orchestration:
        condition: service_healthy
    env_file:
      - ./deploy_batch/.env
    volumes:
      - ./train/data:/data
      - ./mlruns:/mlruns
      - ./batch_data:/app/batch_data
    restart: on-failure

  # 5. Monitoring (needs orchestration)
  monitoring:
    build: ./monitor-reporting
    env_file:
      - ./monitor-reporting/.env
    depends_on:
      - orchestration
    volumes:
      - ./monitor-reporting/metrics:/metrics
      - ./batch_data:/app/batch_data
      - ./mlruns:/mlruns
    restart: on-failure

  deployment-trigger:
    build: ./deployment-trigger
    env_file:
      - ./deployment-trigger/.env
    depends_on:
      - batch-service
      - monitoring
      - model-training

  # 6. API (build lasts)
  api:
    build: ./api
    env_file:
      - ./api/.env
    ports:
      - "8000:8000"
    depends_on:
      deployment-trigger:
        condition: service_completed_successfully
    volumes:
      - ./mlruns:/mlruns
volumes:
  pgdata:
  grafana-data:
